import groovy.json.JsonSlurper
import javax.net.ssl.HttpsURLConnection
import org.apache.http.client.methods.HttpPut
import org.apache.http.impl.client.DefaultHttpClient
import org.apache.http.entity.mime.MultipartEntity
import org.apache.http.entity.mime.HttpMultipartMode;
import org.apache.http.entity.mime.content.FileBody
import org.apache.http.HttpVersion
import org.apache.http.params.CoreProtocolPNames
import org.apache.http.HttpResponse
import org.apache.http.util.EntityUtils
import org.apache.tools.ant.filters.*

version = "0.0.3"
group = "se.su.it.handheld.app"
archivesBaseName = "hermes"
description = """Prototype of Stockholm University mobile app."""

buildscript {
  repositories {
    maven {
      url = 'http://kellyrob99.github.com/Jenkins-api-tour/repository'
    }
    mavenCentral()
  }
  dependencies {
    classpath 'org.kar:gradle-jslint-plugin:0.2'
    classpath 'org.apache.httpcomponents:httpclient:4.2.1'
    classpath 'org.apache.httpcomponents:httpmime:4.2.1'
    classpath 'com.github.timurstrekalov:gradle-saga-plugin:1.3.0'
  }
}

repositories {
  mavenCentral() //needed by the plugin to retrieve the jslint jar
}

dependencies {
}

apply plugin: 'saga'

saga {
  baseDir = new File('assets/www/')
  outputDir = new File('build/reports/coverage')
  includes = '**/*spec.html'
  noInstrumentPatterns = [".*/cordova.*\\.js", ".+\\/lib\\/.+\\.js", ".+\\/spec\\/.+\\.js"]
  sourcesToPreload = "**/*.js"
}

coverage.doLast {
  "cp -v build/reports/coverage/total-coverage.dat build/reports/coverage/jsTestDriver.conf-coverage.dat".execute()
}

apply plugin: 'jslint'

jslint {
  inputDirs = ['assets/www/']
  haltOnFailure = false
  excludes = '**/cordova*.js,**/lib/**/*.js'
  options = 'rhino'
  formatterType = 'xml'
}

task test(type: Exec) {

  def phantomjs = System.getenv('PHANTOMJS')

  if (!phantomjs)
    phantomjs = "which phantomjs".execute().text.trim()

  def testExecScript = file('assets/www/spec/lib/phantom-jasmine/run_jasmine_test.coffee')
  def testRunner = file('assets/www/phantom-runner.html')

  commandLine phantomjs, testExecScript.absolutePath, testRunner.absolutePath
}

task testReports(type: Exec, dependsOn: test) {

  def phantomjs = System.getenv('PHANTOMJS')

  if (!phantomjs)
    phantomjs = "which phantomjs".execute().text.trim()

  def testExecScript = file('assets/www/spec/lib/jasmine-reporters/phantomjs-testrunner.js')
  def testRunner = file('assets/www/phantom-runner.html')

  commandLine phantomjs, testExecScript.absolutePath, testRunner.absolutePath
}

def archiveFile = 'su.tar.gz'
def appId = '219084'
def user = 'utveckling@it.su.se'
def pass = System.getenv('PG_PASS')

task removeTar << {
  // Remove old zip file
  def zipFile = new File(archiveFile)
  zipFile.delete()
}

task buildTar(type: Tar, dependsOn: [removeTar]) {
  archiveName archiveFile
  compression Compression.GZIP
  includes['www']
  excludes = [
          'www/spec.html',
          'www/phantom-runner.html',
          'www/spec',
          '**/cordova*.js']
  from new File("assets/")

  eachFile { FileCopyDetails fileCopyDetails ->
    if (!fileCopyDetails.isDirectory()) {
      if (fileCopyDetails.name ==~ /.*\.html/) {
        fileCopyDetails.filter { String line ->
          line.replaceAll(/cordova-.*\.js/, 'phonegap.js')
        }
      }
      else if (fileCopyDetails.relativePath.pathString == "www${File.separator}config.xml") {
        fileCopyDetails.filter(ReplaceTokens, tokens: [
                id: project.group + '.' + project.name,
                version: project.version
        ])
      }
    }
  }
}

buildTar {
  outputs.upToDateWhen { false }
}

task toPhonegap(dependsOn: buildTar) {
  doLast {

    def token = getToken(user, pass)
    def apiCall = "https://build.phonegap.com/api/v1/apps/${appId}?auth_token=${token}"

    DefaultHttpClient httpclient = new DefaultHttpClient();
    httpclient.getParams().setParameter(CoreProtocolPNames.PROTOCOL_VERSION, HttpVersion.HTTP_1_1);
    HttpPut httpPut = new HttpPut(apiCall)
    httpPut.getParams().setBooleanParameter(CoreProtocolPNames.USE_EXPECT_CONTINUE, true)
    httpPut.setHeader("Accept", "*/*")

    MultipartEntity mp = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
    FileBody fileBody = new FileBody(new File(archiveFile), "binary/octet-stream");
    mp.addPart('file', fileBody);
    httpPut.setEntity(mp);
    HttpResponse response = httpclient.execute(httpPut)

    def status = response.statusLine.statusCode

    if (status != 200)
      throw new Exception("Failed to publish to phonegap: ${status}: ${response.statusLine.reasonPhrase}")
    else {

      def json = new JsonSlurper().parseText(EntityUtils.toString(response.entity))

      if (json?.error?.size() > 0)
        throw new Exception("Error during publish to phonegap: ${json.error}")
      else
        println "Successfully published app '${json.title}' v${json.version} build nr ${json.build_count} to phonegap."
    }
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '1.3'
}

String getToken(String user, String pass) {

  def authString = "${user}:${pass}".getBytes().encodeBase64().toString()

  def connection = (HttpsURLConnection) "https://build.phonegap.com/token".toURL().openConnection()
  connection.setRequestProperty("Authorization", "Basic ${authString}")
  connection.setRequestProperty("Accept", "application/json")
  connection.requestMethod = "POST"

  if (connection?.responseCode != 200)
    throw new Exception("Failed to get token: ${connection?.responseCode}: ${connection?.responseMessage}")

  def json = new JsonSlurper().parseText(connection?.content?.text)
  json?.token
}
